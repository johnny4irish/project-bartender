const mongoose = require('mongoose');
const Role = require('../models/Role');
const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const dataPath = path.join(__dirname, '..', 'data');
const usersFile = path.join(dataPath, 'users.json');
const salesFile = path.join(dataPath, 'sales.json');
const transactionsFile = path.join(dataPath, 'transactions.json');
const prizesFile = path.join(dataPath, 'prizes.json');
const productsFile = path.join(dataPath, 'products.json');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(dataPath)) {
  fs.mkdirSync(dataPath, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
const loadFromFile = (filePath) => {
  try {
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf8');
      const parsed = JSON.parse(data);
      return new Map(Object.entries(parsed));
    }
  } catch (error) {
    console.error(`Error loading data from ${filePath}:`, error);
  }
  return new Map();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
const saveToFile = (map, filePath) => {
  try {
    const obj = Object.fromEntries(map);
    fs.writeFileSync(filePath, JSON.stringify(obj, null, 2));
  } catch (error) {
    console.error(`Error saving data to ${filePath}:`, error);
  }
};

// –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∞–π–ª–æ–≤—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
const users = loadFromFile(usersFile);
const sales = loadFromFile(salesFile);
const transactions = loadFromFile(transactionsFile);
const prizes = loadFromFile(prizesFile);
const products = loadFromFile(productsFile);

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
const saveUsers = () => saveToFile(users, usersFile);
const saveSales = () => saveToFile(sales, salesFile);
const saveTransactions = () => saveToFile(transactions, transactionsFile);
const savePrizes = () => saveToFile(prizes, prizesFile);
const saveProducts = () => saveToFile(products, productsFile);

// –ù–µ–±–æ–ª—å—à–∞—è —É—Ç–∏–ª–∏—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Ä–µ—Ç—Ä–∞–µ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// –û–ø—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB (–µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –ø—Ä–∞–≤–¥—ã)
const getMongoOptions = () => ({
  // –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤—ã–±–æ—Ä –Ω–æ–¥—ã –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏ —Å–µ—Ç–µ–≤—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
  serverSelectionTimeoutMS: 20000,
  socketTimeoutMS: 45000,
  maxPoolSize: 10,
  autoIndex: true,
  keepAlive: true,
  keepAliveInitialDelay: 300000,
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
let reconnecting = false;
let reconnectAttempts = 0;
const MAX_RECONNECT_ATTEMPTS = 20;
const BASE_RECONNECT_DELAY_MS = 2000;

const scheduleReconnect = async () => {
  if (!process.env.MONGODB_URI) return;
  if (reconnecting) return;
  reconnecting = true;
  const delay = Math.min(BASE_RECONNECT_DELAY_MS * (1 + reconnectAttempts), 15000);
  console.log(`‚è≥ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB —á–µ—Ä–µ–∑ ${delay}–º—Å (–ø–æ–ø—ã—Ç–∫–∞ ${reconnectAttempts + 1})`);
  await wait(delay);
  try {
    await mongoose.connect(process.env.MONGODB_URI, getMongoOptions());
    reconnectAttempts = 0;
    console.log('üîÑ MongoDB —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
  } catch (err) {
    reconnectAttempts++;
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MongoDB:', err.message);
    reconnecting = false;
    if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É
      scheduleReconnect();
    } else {
      console.error('üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MongoDB');
    }
  } finally {
    reconnecting = false;
  }
};

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const connectDB = async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MongoDB
    if (process.env.MONGODB_URI) {
      const mongoOptions = getMongoOptions();

      const MAX_RETRIES = 3;
      const RETRY_DELAY_MS = 3000;

      for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
        try {
          const conn = await mongoose.connect(process.env.MONGODB_URI, mongoOptions);
          console.log(`MongoDB Connected: ${conn.connection.host}`);
          console.log(`Database: ${conn.connection.name}`);

          // Ensure default system roles exist
          try {
            await Role.createDefaultRoles();
            console.log('Default roles ensured');
          } catch (rolesErr) {
            console.error('Error ensuring default roles:', rolesErr.message);
          }

          // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –∞–≤—Ç–æ‚Äë—Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç
          mongoose.connection.on('connected', () => {
            console.log('‚úîÔ∏è  MongoDB: connected');
          });
          mongoose.connection.on('disconnected', () => {
            console.log('‚ö†Ô∏è  MongoDB: disconnected. –ü—ã—Ç–∞—é—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...');
            scheduleReconnect();
          });
          mongoose.connection.on('reconnected', () => {
            console.log('‚úîÔ∏è  MongoDB: reconnected');
          });
          mongoose.connection.on('error', (err) => {
            console.error('‚ùå MongoDB connection error:', err.message);
            if (mongoose.connection.readyState !== 1) {
              scheduleReconnect();
            }
          });

          return; // –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ‚Äî –≤—ã—Ö–æ–¥–∏–º –±–µ–∑ —Ñ–æ–ª–±—ç–∫–∞
        } catch (mongoError) {
          console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB #${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å: ${mongoError.message}`);
          if (attempt < MAX_RETRIES) {
            console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${RETRY_DELAY_MS}–º—Å...`);
            await wait(RETRY_DELAY_MS);
          } else {
            console.log('MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
          }
        }
      }
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –≤ —Ñ–∞–π–ª–∞—Ö
    console.log('Using file-based database for development');
    console.log('Database Connected: File-Based Storage');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const adminUser = {
      _id: 'admin_id',
      name: 'Admin User',
      email: 'admin@projectbartender.com',
      password: '$2a$10$UJNvobb0FR1bXMtgkfKkquDDoYsDjCo8IzZNpIUGzx9i4kOe1lj6O', // admin123
      phone: '+7 (999) 123-45-67',
      bar: 'Admin Panel',
      city: '–ú–æ—Å–∫–≤–∞',
      role: 'admin',
      points: 0,
      totalEarnings: 0,
      availableBalance: 0,
      withdrawnAmount: 0,
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    users.set('admin_id', adminUser);
    
  } catch (error) {
    console.error('Database connection error:', error.message);
    // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º in-memory –±–∞–∑—É
    console.log('Falling back to in-memory database');
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥–µ–ª—è—Ö
module.exports = {
  connectDB,
  collections: {
    users,
    sales,
    transactions,
    prizes,
    products
  },
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  saveUsers,
  saveSales,
  saveTransactions,
  savePrizes,
  saveProducts
};
// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Mongoose –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
mongoose.set('strictQuery', true);
// –û—Ç–∫–ª—é—á–∞–µ–º –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å —Ç–∞–π–º–∞—É—Ç—ã –ø—Ä–∏ –¥–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç–µ
mongoose.set('bufferCommands', false);
// –°–Ω–∏–∂–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –±—É—Ñ–µ—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Ñ–æ–ª–±—ç–∫–∞
mongoose.set('bufferTimeoutMS', 2000);