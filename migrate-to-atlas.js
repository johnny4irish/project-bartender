const mongoose = require('mongoose');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
const LOCAL_URI = 'mongodb://localhost:27017/project-bartender';
const ATLAS_URI = process.env.MONGODB_URI;

// –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
const { getModel } = require('./models/ModelFactory');

async function migrateData() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π MongoDB –≤ Atlas...\n');

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const localConnection = await mongoose.createConnection(LOCAL_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Atlas
    console.log('üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB Atlas...');
    const atlasConnection = await mongoose.createConnection(ATLAS_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Atlas —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±–µ–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    const localModels = {
      User: localConnection.model('User', require('./models/User').schema),
      Prize: localConnection.model('Prize', require('./models/Prize').schema),
      Sale: localConnection.model('Sale', require('./models/Sale').schema),
      Transaction: localConnection.model('Transaction', require('./models/Transaction').schema),
      Cart: localConnection.model('Cart', require('./models/Cart').schema),
      City: localConnection.model('City', require('./models/City').schema),
      Bar: localConnection.model('Bar', require('./models/Bar').schema),
      Role: localConnection.model('Role', require('./models/Role').schema),
      Product: localConnection.model('Product', require('./models/Product').schema),
      Category: localConnection.model('Category', require('./models/Category').schema),
      Brand: localConnection.model('Brand', require('./models/Brand').schema),
      Order: localConnection.model('Order', require('./models/Order').schema)
    };

    const atlasModels = {
      User: atlasConnection.model('User', require('./models/User').schema),
      Prize: atlasConnection.model('Prize', require('./models/Prize').schema),
      Sale: atlasConnection.model('Sale', require('./models/Sale').schema),
      Transaction: atlasConnection.model('Transaction', require('./models/Transaction').schema),
      Cart: atlasConnection.model('Cart', require('./models/Cart').schema),
      City: atlasConnection.model('City', require('./models/City').schema),
      Bar: atlasConnection.model('Bar', require('./models/Bar').schema),
      Role: atlasConnection.model('Role', require('./models/Role').schema),
      Product: atlasConnection.model('Product', require('./models/Product').schema),
      Category: atlasConnection.model('Category', require('./models/Category').schema),
      Brand: atlasConnection.model('Brand', require('./models/Brand').schema),
      Order: atlasConnection.model('Order', require('./models/Order').schema)
    };

    // –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–∑-–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
    const collections = [
      'Role',
      'City', 
      'Bar',
      'Category',
      'Brand',
      'Product',
      'User',
      'Prize',
      'Sale',
      'Transaction',
      'Cart',
      'Order'
    ];

    let totalMigrated = 0;

    // –ú–∏–≥—Ä–∞—Ü–∏—è –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    for (const collectionName of collections) {
      console.log(`üì¶ –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é: ${collectionName}`);
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
        const localData = await localModels[collectionName].find({});
        console.log(`   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ: ${localData.length}`);

        if (localData.length === 0) {
          console.log(`   ‚ö†Ô∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è ${collectionName} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º\n`);
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ Atlas
        const existingCount = await atlasModels[collectionName].countDocuments({});
        
        if (existingCount > 0) {
          console.log(`   ‚ö†Ô∏è  –í Atlas —É–∂–µ –µ—Å—Ç—å ${existingCount} –∑–∞–ø–∏—Å–µ–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ${collectionName}`);
          console.log(`   üóëÔ∏è  –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π...`);
          await atlasModels[collectionName].deleteMany({});
        }

        // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Atlas
        if (localData.length > 0) {
          await atlasModels[collectionName].insertMany(localData, { ordered: false });
          console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${localData.length} –∑–∞–ø–∏—Å–µ–π`);
          totalMigrated += localData.length;
        }

      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ ${collectionName}:`, error.message);
        
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø—Ä–æ–±—É–µ–º –ø–æ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
        if (error.message.includes('duplicate') || error.code === 11000) {
          console.log(`   üîÑ –ü—Ä–æ–±—É–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏...`);
          const localData = await localModels[collectionName].find({});
          let migrated = 0;
          
          for (const doc of localData) {
            try {
              await atlasModels[collectionName].create(doc.toObject());
              migrated++;
            } catch (dupError) {
              console.log(`   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å: ${doc._id}`);
            }
          }
          
          console.log(`   ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${migrated} –∏–∑ ${localData.length} –∑–∞–ø–∏—Å–µ–π`);
          totalMigrated += migrated;
        }
      }
      
      console.log('');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:');
    console.log('========================');
    
    for (const collectionName of collections) {
      const localCount = await localModels[collectionName].countDocuments({});
      const atlasCount = await atlasModels[collectionName].countDocuments({});
      
      const status = localCount === atlasCount ? '‚úÖ' : '‚ö†Ô∏è';
      console.log(`${status} ${collectionName}: ${localCount} ‚Üí ${atlasCount}`);
    }

    console.log(`\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${totalMigrated}`);

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await localConnection.close();
    await atlasConnection.close();
    
    console.log('\n‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã');
    console.log('üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Railway –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  migrateData()
    .then(() => {
      console.log('\nüéØ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
      process.exit(1);
    });
}

module.exports = { migrateData };