require('dotenv').config();
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

async function hashPasswords() {
  try {
    console.log('üîê –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ');

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–ø—Ä—è–º—É—é
    const usersCollection = mongoose.connection.db.collection('users');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await usersCollection.find({}).toArray();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

    let hashedCount = 0;
    
    for (const user of users) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–æ–ª—å —É–∂–µ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
      // –•—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ bcrypt –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å $2a$, $2b$ –∏–ª–∏ $2y$
      const isAlreadyHashed = /^\$2[aby]\$/.test(user.password);
      
      if (!isAlreadyHashed) {
        console.log(`üîÑ –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`);
        
        // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(user.password, salt);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await usersCollection.updateOne(
          { _id: user._id },
          { $set: { password: hashedPassword } }
        );
        
        hashedCount++;
        console.log(`‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è: ${user.email}`);
      } else {
        console.log(`‚è≠Ô∏è  –ü–∞—Ä–æ–ª—å —É–∂–µ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω –¥–ª—è: ${user.email}`);
      }
    }

    console.log(`\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
    console.log(`üìà –•—ç—à–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä–æ–ª–µ–π: ${hashedCount}`);
    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB');
  }
}

hashPasswords();