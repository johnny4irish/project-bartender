import { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import { useAuth } from '../../context/AuthContext'
import axios from 'axios'
import { toast } from 'react-toastify'

const Prizes = () => {
  const { user, loading } = useAuth()
  const router = useRouter()
  const [prizes, setPrizes] = useState([])
  const [isLoading, setIsLoading] = useState(true)
  const [selectedCategory, setSelectedCategory] = useState('')
  const [showAvailableOnly, setShowAvailableOnly] = useState(false)
  const [addingToCart, setAddingToCart] = useState(null)
  const [cart, setCart] = useState({ items: [], totalCost: 0 })
  const [showCart, setShowCart] = useState(false)
  const [isCheckingOut, setIsCheckingOut] = useState(false)

  useEffect(() => {
    if (!loading && !user) {
      router.push('/login')
    }
  }, [user, loading, router])

  useEffect(() => {
    if (user) {
      fetchPrizes()
      fetchCart()
    }
  }, [user, selectedCategory, showAvailableOnly])

  const fetchPrizes = async () => {
    try {
      setIsLoading(true)
      const params = new URLSearchParams()
      if (selectedCategory) params.append('category', selectedCategory)
      if (showAvailableOnly) params.append('available', 'true')

      const token = localStorage.getItem('token')
      const config = {
        headers: {
          'x-auth-token': token
        }
      }

      const res = await axios.get(`/api/gamification/prizes?${params.toString()}`, config)
      setPrizes(res.data)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–∑–æ–≤:', error)
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–∑–æ–≤')
    } finally {
      setIsLoading(false)
    }
  }

  const fetchCart = async () => {
    try {
      const token = localStorage.getItem('token')
      const config = {
        headers: {
          'x-auth-token': token
        }
      }

      const res = await axios.get('/api/gamification/cart', config)
      setCart(res.data)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error)
    }
  }

  const handleAddToCart = async (prizeId) => {
    try {
      setAddingToCart(prizeId)
      const token = localStorage.getItem('token')
      const config = {
        headers: {
          'x-auth-token': token
        }
      }

      const res = await axios.post(`/api/gamification/cart/add/${prizeId}`, { quantity: 1 }, config)
      
      toast.success('–ü—Ä–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')
      fetchCart()
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:', error)
      toast.error(error.response?.data?.msg || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É')
    } finally {
      setAddingToCart(null)
    }
  }

  const handleUpdateQuantity = async (prizeId, newQuantity) => {
    try {
      const token = localStorage.getItem('token')
      const config = {
        headers: {
          'x-auth-token': token
        }
      }

      if (newQuantity === 0) {
        await axios.delete(`/api/gamification/cart/remove/${prizeId}`, config)
      } else {
        await axios.put(`/api/gamification/cart/update/${prizeId}`, { quantity: newQuantity }, config)
      }
      
      fetchCart()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:', error)
      toast.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã')
    }
  }

  const handleCheckout = async () => {
    try {
      setIsCheckingOut(true)
      const token = localStorage.getItem('token')
      const config = {
        headers: {
          'x-auth-token': token
        }
      }

      const res = await axios.post('/api/gamification/cart/checkout', {}, config)
      
      toast.success('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!')
      setCart({ items: [], totalCost: 0 })
      setShowCart(false)
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
      router.push(`/gamification/order-confirmation?orderId=${res.data.order._id}`)
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error)
      toast.error(error.response?.data?.msg || '–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞')
    } finally {
      setIsCheckingOut(false)
    }
  }

  const getCategoryIcon = (category) => {
    switch (category) {
      case 'merchandise': return 'üéÅ'
      case 'discount': return 'üí∞'
      case 'experience': return 'üéØ'
      case 'cash': return 'üíµ'
      case 'other': return '‚≠ê'
      default: return 'üéÅ'
    }
  }

  const getCategoryName = (category) => {
    const categoryNames = {
      'merchandise': '–¢–æ–≤–∞—Ä—ã',
      'discount': '–°–∫–∏–¥–∫–∏', 
      'experience': '–í–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è',
      'cash': '–î–µ–Ω–µ–∂–Ω—ã–µ –ø—Ä–∏–∑—ã',
      'other': '–î—Ä—É–≥–æ–µ'
    }
    return categoryNames[category] || category
  }

  const categories = ['merchandise', 'discount', 'experience', 'cash', 'other']

  if (loading || !user) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-600"></div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="bg-white rounded-lg border border-gray-200 shadow-sm p-6 mb-8">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–∑–æ–≤</h1>
              <p className="text-gray-600">–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø—Ä–∏–∑—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–∫–∞–∑—ã!</p>
            </div>
            <div className="mt-4 sm:mt-0 flex items-center space-x-4">
              <div className="bg-gray-900 text-white px-4 py-2 rounded-lg">
                <span className="font-semibold">{user.points?.toLocaleString() || 0} –±–∞–ª–ª–æ–≤</span>
              </div>
              {cart.items.length > 0 && (
                <button
                  onClick={() => setShowCart(!showCart)}
                  className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition duration-200 relative"
                >
                  üõí –ö–æ—Ä–∑–∏–Ω–∞ ({cart.items.length})
                  {cart.totalCost > 0 && (
                    <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full px-2 py-1">
                      {cart.totalCost}
                    </span>
                  )}
                </button>
              )}
              <button
                onClick={() => router.push('/gamification/cart')}
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition duration-200 relative"
              >
                üõí –ö–æ—Ä–∑–∏–Ω–∞
                {cart.items.length > 0 && (
                  <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                    {cart.items.reduce((total, item) => total + item.quantity, 0)}
                  </span>
                )}
              </button>
              <button
                onClick={() => router.push('/gamification/orders')}
                className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition duration-200"
              >
                üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã
              </button>
              <button
                onClick={() => router.push('/dashboard')}
                className="bg-gray-900 hover:bg-gray-800 text-white px-4 py-2 rounded-lg transition duration-200"
              >
                ‚Üê –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏
              </button>
            </div>
          </div>
        </div>

        {/* Cart Panel */}
        {showCart && cart.items.length > 0 && (
          <div className="bg-white rounded-lg border border-gray-200 shadow-sm p-6 mb-8">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold text-gray-900">–ö–æ—Ä–∑–∏–Ω–∞</h2>
              <button
                onClick={() => setShowCart(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                ‚úï
              </button>
            </div>
            
            <div className="space-y-4">
              {cart.items.map((item) => (
                <div key={item.prize._id} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                  <div className="flex-1">
                    <h3 className="font-medium text-gray-900">{item.prize.name}</h3>
                    <p className="text-sm text-gray-600">{item.priceAtTime} –±–∞–ª–ª–æ–≤ –∑–∞ —à—Ç—É–∫—É</p>
                  </div>
                  <div className="flex items-center space-x-3">
                    <button
                      onClick={() => handleUpdateQuantity(item.prize._id, item.quantity - 1)}
                      className="w-8 h-8 rounded-full bg-gray-200 hover:bg-gray-300 flex items-center justify-center"
                    >
                      -
                    </button>
                    <span className="font-medium">{item.quantity}</span>
                    <button
                      onClick={() => handleUpdateQuantity(item.prize._id, item.quantity + 1)}
                      className="w-8 h-8 rounded-full bg-gray-200 hover:bg-gray-300 flex items-center justify-center"
                    >
                      +
                    </button>
                    <button
                      onClick={() => handleUpdateQuantity(item.prize._id, 0)}
                      className="text-red-600 hover:text-red-800 ml-2"
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </div>
              ))}
            </div>
            
            <div className="mt-6 pt-4 border-t border-gray-200">
              <div className="flex justify-between items-center mb-4">
                <span className="text-lg font-semibold">–ò—Ç–æ–≥–æ: {cart.totalCost} –±–∞–ª–ª–æ–≤</span>
                <span className="text-sm text-gray-600">
                  –û—Å—Ç–∞–Ω–µ—Ç—Å—è: {user.points - cart.totalCost} –±–∞–ª–ª–æ–≤
                </span>
              </div>
              
              {user.points >= cart.totalCost ? (
                <button
                  onClick={handleCheckout}
                  disabled={isCheckingOut}
                  className="w-full bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg font-medium transition duration-200 disabled:opacity-50"
                >
                  {isCheckingOut ? '–û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑...' : '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'}
                </button>
              ) : (
                <div className="text-center">
                  <p className="text-red-600 mb-2">
                    –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤! –ù—É–∂–Ω–æ –µ—â–µ {cart.totalCost - user.points} –±–∞–ª–ª–æ–≤
                  </p>
                  <button
                    disabled
                    className="w-full bg-gray-300 text-gray-500 py-3 px-4 rounded-lg font-medium cursor-not-allowed"
                  >
                    –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤
                  </button>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Filters */}
        <div className="bg-white rounded-lg border border-gray-200 shadow-sm p-6 mb-8">
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0">
            <div>
              <h2 className="text-lg font-semibold text-gray-900 mb-3">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
              <div className="flex flex-wrap gap-2">
                <button
                  onClick={() => setSelectedCategory('')}
                  className={`px-4 py-2 rounded-lg transition duration-200 ${
                    selectedCategory === ''
                      ? 'bg-gray-900 text-white'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                >
                  –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                </button>
                {categories.map((category) => (
                  <button
                    key={category}
                    onClick={() => setSelectedCategory(category)}
                    className={`px-4 py-2 rounded-lg transition duration-200 ${
                      selectedCategory === category
                        ? 'bg-gray-900 text-white'
                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    }`}
                  >
                    {getCategoryName(category)}
                  </button>
                ))}
              </div>
            </div>
            
            <div className="flex items-center">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={showAvailableOnly}
                  onChange={(e) => setShowAvailableOnly(e.target.checked)}
                  className="rounded border-gray-300 text-gray-900 shadow-sm focus:border-gray-300 focus:ring focus:ring-gray-200 focus:ring-opacity-50"
                />
                <span className="ml-2 text-sm text-gray-700">–¢–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ</span>
              </label>
            </div>
          </div>
        </div>

        {/* Prizes Table */}
        {isLoading ? (
          <div className="text-center py-12">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-600 mx-auto"></div>
            <p className="mt-4 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–∑–æ–≤...</p>
          </div>
        ) : prizes.length === 0 ? (
          <div className="bg-white rounded-lg border border-gray-200 shadow-sm p-12 text-center">
            <h3 className="text-xl font-semibold text-gray-900 mb-2">–ü—Ä–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p className="text-gray-600">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ</p>
          </div>
        ) : (
          <div className="bg-white border border-gray-200 shadow-sm overflow-hidden sm:rounded-lg">
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –ü—Ä–∏–∑
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –°—Ç–æ–∏–º–æ—Å—Ç—å
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –°—Ç–∞—Ç—É—Å
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –î–µ–π—Å—Ç–≤–∏–µ
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {prizes.map((prize) => (
                    <tr key={prize._id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">{prize.name}</div>
                        <div className="text-sm text-gray-500">{prize.description}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800">
                          {getCategoryName(prize.category)}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {prize.cost?.toLocaleString() || 0} –±–∞–ª–ª–æ–≤
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {prize.quantity > 0 ? prize.quantity : '–ó–∞–∫–æ–Ω—á–∏–ª—Å—è'}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {!prize.isAvailable ? (
                          <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800">
                            –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                          </span>
                        ) : !prize.canAfford ? (
                          <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800">
                            –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤
                          </span>
                        ) : (
                          <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-gray-900 text-white">
                            –î–æ—Å—Ç—É–ø–µ–Ω
                          </span>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                         <button
                           onClick={() => handleAddToCart(prize._id)}
                           disabled={
                             !prize.canAfford || 
                             !prize.isAvailable || 
                             addingToCart === prize._id
                           }
                           className={`px-4 py-2 rounded-md text-sm font-medium transition duration-200 ${
                             !prize.canAfford || !prize.isAvailable
                               ? 'bg-gray-200 text-gray-500 cursor-not-allowed'
                               : addingToCart === prize._id
                               ? 'bg-gray-400 text-white cursor-not-allowed'
                               : 'bg-blue-600 hover:bg-blue-700 text-white'
                           }`}
                         >
                           {addingToCart === prize._id ? (
                             <div className="flex items-center">
                               <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                               –î–æ–±–∞–≤–ª—è–µ–º...
                             </div>
                           ) : !prize.canAfford ? (
                             `–ù—É–∂–Ω–æ –µ—â–µ ${(prize.cost - user.points).toLocaleString()}`
                           ) : !prize.isAvailable ? (
                             '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
                           ) : (
                             'üõí –í –∫–æ—Ä–∑–∏–Ω—É'
                           )}
                         </button>
                       </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {/* Info Card */}
        <div className="mt-8 bg-white border border-gray-200 rounded-lg p-6">
          <div className="flex items-start">
            <div className="ml-3">
              <h3 className="text-lg font-medium text-gray-900">–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤?</h3>
              <div className="mt-2 text-gray-600">
                <ul className="list-disc list-inside space-y-1">
                  <li>–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø—Ä–æ–¥–∞–∂–∏ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —á–µ–∫–æ–≤ - –ø–æ–ª—É—á–∞–π—Ç–µ 10% –æ—Ç —Å—É–º–º—ã –≤ –±–∞–ª–ª–∞—Ö</li>
                  <li>–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫—Ü–∏—è—Ö —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏</li>
                  <li>–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</li>
                  <li>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –±–∞—Ä–º–µ–Ω–æ–≤ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Prizes