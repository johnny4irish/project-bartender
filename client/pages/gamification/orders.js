import { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import { useAuth } from '../../context/AuthContext'
import axios from 'axios'
import { toast } from 'react-toastify'
import { authAPI } from '../../utils/api'

const Orders = () => {
  const { user, loading } = useAuth()
  const router = useRouter()
  const [orders, setOrders] = useState([])
  const [isLoading, setIsLoading] = useState(true)
  const [statusFilter, setStatusFilter] = useState('all')
  const [sortBy, setSortBy] = useState('newest')

  useEffect(() => {
    if (!loading && !user) {
      router.push('/login')
    }
  }, [user, loading, router])

  useEffect(() => {
    if (user) {
      fetchOrders()
    }
  }, [user])

  const fetchOrders = async () => {
    try {
      setIsLoading(true)
      const token = localStorage.getItem('token')
      const config = {
        headers: {
          'x-auth-token': token
        }
      }

      const res = await axios.get('/api/gamification/orders', config)
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ - —ç—Ç–æ –º–∞—Å—Å–∏–≤
      setOrders(Array.isArray(res.data) ? res.data : [])
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error)
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤')
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      setOrders([])
    } finally {
      setIsLoading(false)
    }
  }

  const handleCancelOrder = async (orderId) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑? –ë–∞–ª–ª—ã –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç.')) {
      return
    }

    try {
      const token = localStorage.getItem('token')
      const config = {
        headers: {
          'x-auth-token': token
        }
      }

      await axios.post(`/api/gamification/orders/${orderId}/cancel`, {}, config)
      toast.success('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω, –±–∞–ª–ª—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç')
      fetchOrders()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:', error)
      toast.error(error.response?.data?.message || '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞')
    }
  }

  const getStatusColor = (status) => {
    switch (status) {
      case 'pending': return 'bg-yellow-100 text-yellow-800'
      case 'confirmed': return 'bg-blue-100 text-blue-800'
      case 'processing': return 'bg-purple-100 text-purple-800'
      case 'shipped': return 'bg-indigo-100 text-indigo-800'
      case 'delivered': return 'bg-green-100 text-green-800'
      case 'cancelled': return 'bg-red-100 text-red-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getStatusText = (status) => {
    const statusTexts = {
      'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
      'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
      'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
      'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    }
    return statusTexts[status] || status
  }

  const canCancelOrder = (order) => {
    return ['pending', 'confirmed'].includes(order.status)
  }

  const filteredOrders = orders.filter(order => {
    if (statusFilter === 'all') return true
    return order.status === statusFilter
  })

  const sortedOrders = [...filteredOrders].sort((a, b) => {
    switch (sortBy) {
      case 'newest':
        return new Date(b.createdAt) - new Date(a.createdAt)
      case 'oldest':
        return new Date(a.createdAt) - new Date(b.createdAt)
      case 'cost-high':
        return b.totalCost - a.totalCost
      case 'cost-low':
        return a.totalCost - b.totalCost
      default:
        return 0
    }
  })

  if (loading || !user) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-600"></div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="bg-white rounded-lg border border-gray-200 shadow-sm p-6 mb-8">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</h1>
              <p className="text-gray-600">–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏ –ø—Ä–∏–∑–æ–≤</p>
            </div>
            <div className="mt-4 sm:mt-0 flex space-x-4">
              <button
                onClick={() => router.push('/gamification/prizes')}
                className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition duration-200"
              >
                üéÅ –ö –ø—Ä–∏–∑–∞–º
              </button>
              <button
                onClick={() => router.push('/dashboard')}
                className="bg-gray-900 hover:bg-gray-800 text-white px-4 py-2 rounded-lg transition duration-200"
              >
                ‚Üê –ì–ª–∞–≤–Ω–∞—è
              </button>
            </div>
          </div>
        </div>

        {/* Filters and Sorting */}
        <div className="bg-white rounded-lg border border-gray-200 shadow-sm p-6 mb-8">
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="flex-1">
              <label htmlFor="statusFilter" className="block text-sm font-medium text-gray-700 mb-2">
                –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
              </label>
              <select
                id="statusFilter"
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-gray-500 focus:border-gray-500"
              >
                <option value="all">–í—Å–µ –∑–∞–∫–∞–∑—ã</option>
                <option value="pending">–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</option>
                <option value="confirmed">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</option>
                <option value="processing">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</option>
                <option value="shipped">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω</option>
                <option value="delivered">–î–æ—Å—Ç–∞–≤–ª–µ–Ω</option>
                <option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω</option>
              </select>
            </div>
            
            <div className="flex-1">
              <label htmlFor="sortBy" className="block text-sm font-medium text-gray-700 mb-2">
                –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
              </label>
              <select
                id="sortBy"
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-gray-500 focus:border-gray-500"
              >
                <option value="newest">–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ</option>
                <option value="oldest">–°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ</option>
                <option value="cost-high">–ü–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ç–æ–∏–º–æ—Å—Ç–∏</option>
                <option value="cost-low">–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Å—Ç–æ–∏–º–æ—Å—Ç–∏</option>
              </select>
            </div>
          </div>
        </div>

        {/* Orders List */}
        {isLoading ? (
          <div className="bg-white rounded-lg border border-gray-200 shadow-sm p-12 text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-600 mx-auto"></div>
            <p className="mt-4 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</p>
          </div>
        ) : sortedOrders.length === 0 ? (
          <div className="bg-white rounded-lg border border-gray-200 shadow-sm p-12 text-center">
            <div className="text-6xl mb-4">üì¶</div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">
              {statusFilter === 'all' ? '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤' : `–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${getStatusText(statusFilter)}"`}
            </h3>
            <p className="text-gray-600 mb-6">
              {statusFilter === 'all' 
                ? '–ù–∞—á–Ω–∏—Ç–µ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã, —á—Ç–æ–±—ã –æ–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã –Ω–∞ –ø—Ä–∏–∑—ã!'
                : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑'
              }
            </p>
            <button
              onClick={() => router.push('/gamification/prizes')}
              className="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-medium transition duration-200"
            >
              –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–∑—ã
            </button>
          </div>
        ) : (
          <div className="space-y-6">
            {sortedOrders.map((order) => (
              <div key={order._id} className="bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden">
                {/* Order Header */}
                <div className="p-6 border-b border-gray-200">
                  <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center">
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900">
                        –ó–∞–∫–∞–∑ #{order.orderNumber}
                      </h3>
                      <p className="text-sm text-gray-600 mt-1">
                        {new Date(order.createdAt).toLocaleString('ru-RU')}
                      </p>
                    </div>
                    <div className="mt-4 sm:mt-0 flex items-center space-x-4">
                      <span className={`inline-flex px-3 py-1 text-sm font-semibold rounded-full ${getStatusColor(order.status)}`}>
                        {getStatusText(order.status)}
                      </span>
                      <span className="text-lg font-bold text-gray-900">
                        {order.totalCost} –±–∞–ª–ª–æ–≤
                      </span>
                    </div>
                  </div>
                </div>

                {/* Order Items */}
                <div className="p-6">
                  <h4 className="text-sm font-medium text-gray-500 uppercase tracking-wider mb-4">
                    –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ ({order.items.length})
                  </h4>
                  <div className="space-y-3">
                    {order.items.map((item, index) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                        <div className="flex-1">
                          <h5 className="font-medium text-gray-900">{item.prizeName}</h5>
                          <p className="text-sm text-gray-600">{item.prizeDescription}</p>
                        </div>
                        <div className="text-right">
                          <p className="font-medium">√ó{item.quantity}</p>
                          <p className="text-sm text-gray-600">{item.priceAtTime * item.quantity} –±–∞–ª–ª–æ–≤</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Order Actions */}
                <div className="px-6 py-4 bg-gray-50 border-t border-gray-200">
                  <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-2 sm:space-y-0">
                    <div className="text-sm text-gray-600">
                      {order.deliveryAddress && (
                        <p><span className="font-medium">–ê–¥—Ä–µ—Å:</span> {order.deliveryAddress}</p>
                      )}
                      {order.estimatedDelivery && (
                        <p><span className="font-medium">–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞:</span> {new Date(order.estimatedDelivery).toLocaleDateString('ru-RU')}</p>
                      )}
                    </div>
                    <div className="flex space-x-2">
                      <button
                        onClick={() => router.push(`/gamification/order-confirmation?orderId=${order._id}`)}
                        className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition duration-200"
                      >
                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                      </button>
                      {canCancelOrder(order) && (
                        <button
                          onClick={() => handleCancelOrder(order._id)}
                          className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition duration-200"
                        >
                          –û—Ç–º–µ–Ω–∏—Ç—å
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Summary */}
        {!isLoading && sortedOrders.length > 0 && (
          <div className="bg-white rounded-lg border border-gray-200 shadow-sm p-6 mt-8">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
              <div className="text-center">
                <p className="text-2xl font-bold text-gray-900">{orders.length}</p>
                <p className="text-sm text-gray-600">–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤</p>
              </div>
              <div className="text-center">
                <p className="text-2xl font-bold text-green-600">
                  {orders.filter(o => o.status === 'delivered').length}
                </p>
                <p className="text-sm text-gray-600">–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</p>
              </div>
              <div className="text-center">
                <p className="text-2xl font-bold text-blue-600">
                  {orders.filter(o => ['pending', 'confirmed', 'processing', 'shipped'].includes(o.status)).length}
                </p>
                <p className="text-sm text-gray-600">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</p>
              </div>
              <div className="text-center">
                <p className="text-2xl font-bold text-gray-900">
                  {orders.reduce((sum, order) => sum + order.totalCost, 0)}
                </p>
                <p className="text-sm text-gray-600">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –±–∞–ª–ª–æ–≤</p>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default Orders