const fs = require('fs');
const path = require('path');

// –ú–∞–ø–ø–∏–Ω–≥ ID –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const ID_MAPPING = {
  roles: {
    'admin': '68dbb40edee29e54c6880dd4',
    'bartender': '68dbb40fdee29e54c6880dee',
    'brand_representative': '68dbb40fdee29e54c6880df6'
  },
  brands: {
    'gintl': '68dbb40fdee29e54c6880dfe',
    'test_brand': '68dbb40fdee29e54c6880e01'
  },
  categories: {
    'spirits': '68dbb40fdee29e54c6880e04',
    'beer': '68dbb410dee29e54c6880e07',
    'wine': '68dbb410dee29e54c6880e0a'
  },
  cities: {
    '–ú–æ—Å–∫–≤–∞': '68dbb2ce84765a32fd027ff5',
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': '68dbb2ce84765a32fd027ff6',
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': '68dbb2ce84765a32fd027ff7'
  },
  bars: {
    'Test Bar': '68dbb410dee29e54c6880e0e'
  }
};

function generateObjectId() {
  return Math.floor(Date.now() / 1000).toString(16) + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, () => {
    return Math.floor(Math.random() * 16).toString(16);
  });
}

function fixUsersData() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ users.json...');
  
  try {
    const usersPath = path.join(__dirname, 'data', 'users.json');
    const usersData = JSON.parse(fs.readFileSync(usersPath, 'utf8'));
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const usersArray = Object.values(usersData);
    const fixedUsersArray = [];
    
    usersArray.forEach(user => {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ObjectId –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUserId = generateObjectId();
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      let fixedUser = {
        ...user,
        _id: newUserId,
        role: ID_MAPPING.roles[user.role] || ID_MAPPING.roles['bartender'],
        city: ID_MAPPING.cities[user.city] || ID_MAPPING.cities['–ú–æ—Å–∫–≤–∞'],
        bar: ID_MAPPING.bars[user.bar] || ID_MAPPING.bars['Test Bar']
      };
      
      console.log(`  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name}: ${user._id} -> ${newUserId}`);
      console.log(`     –†–æ–ª—å: ${user.role} -> ${fixedUser.role}`);
      console.log(`     –ì–æ—Ä–æ–¥: ${user.city} -> ${fixedUser.city}`);
      console.log(`     –ë–∞—Ä: ${user.bar} -> ${fixedUser.bar}`);
      
      fixedUsersArray.push(fixedUser);
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –º–∞—Å—Å–∏–≤
    fs.writeFileSync(usersPath, JSON.stringify(fixedUsersArray, null, 2), 'utf8');
    console.log(`‚úÖ users.json –∏—Å–ø—Ä–∞–≤–ª–µ–Ω (${fixedUsersArray.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)`);
    
    return fixedUsersArray;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ users.json:', error.message);
    return [];
  }
}

function fixProductsData() {
  console.log('\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ products.json...');
  
  try {
    const productsPath = path.join(__dirname, 'data', 'products.json');
    const productsData = JSON.parse(fs.readFileSync(productsPath, 'utf8'));
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const productsArray = Object.values(productsData);
    const fixedProductsArray = [];
    
    productsArray.forEach(product => {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ObjectId –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
      const newProductId = generateObjectId();
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
      let fixedProduct = {
        ...product,
        _id: newProductId,
        brand: ID_MAPPING.brands[product.brand] || ID_MAPPING.brands['test_brand'],
        category: ID_MAPPING.categories[product.category] || ID_MAPPING.categories['spirits'],
        bottlePrice: product.bottlePrice || product.price || 1000, // –î–æ–±–∞–≤–ª—è–µ–º bottlePrice –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        isActive: product.isActive !== undefined ? product.isActive : true,
        inStock: product.inStock !== undefined ? product.inStock : true
      };
      
      console.log(`  ‚úÖ –ü—Ä–æ–¥—É–∫—Ç ${product.name}: ${product._id} -> ${newProductId}`);
      console.log(`     –ë—Ä–µ–Ω–¥: ${product.brand} -> ${fixedProduct.brand}`);
      console.log(`     –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category} -> ${fixedProduct.category}`);
      console.log(`     –¶–µ–Ω–∞ –∑–∞ –±—É—Ç—ã–ª–∫—É: ${fixedProduct.bottlePrice}`);
      
      fixedProductsArray.push(fixedProduct);
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –º–∞—Å—Å–∏–≤
    fs.writeFileSync(productsPath, JSON.stringify(fixedProductsArray, null, 2), 'utf8');
    console.log(`‚úÖ products.json –∏—Å–ø—Ä–∞–≤–ª–µ–Ω (${fixedProductsArray.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤)`);
    
    return fixedProductsArray;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ products.json:', error.message);
    return [];
  }
}

function createBackups() {
  console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...');
  
  const dataDir = path.join(__dirname, 'data');
  const backupDir = path.join(__dirname, 'data-backup');
  
  if (!fs.existsSync(backupDir)) {
    fs.mkdirSync(backupDir);
  }
  
  const files = ['users.json', 'products.json'];
  
  files.forEach(file => {
    const sourcePath = path.join(dataDir, file);
    const backupPath = path.join(backupDir, `${file}.backup`);
    
    if (fs.existsSync(sourcePath)) {
      fs.copyFileSync(sourcePath, backupPath);
      console.log(`  ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${file}.backup`);
    }
  });
}

function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö...\n');
  
  // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
  createBackups();
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
  const fixedUsers = fixUsersData();
  const fixedProducts = fixProductsData();
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
  console.log(`  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${fixedUsers.length} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ`);
  console.log(`  - –ü—Ä–æ–¥—É–∫—Ç—ã: ${fixedProducts.length} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ`);
  
  console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('üí° –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ data-backup/');
}

main();